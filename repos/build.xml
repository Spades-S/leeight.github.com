<?xml version="1.0"?>
<project basedir="." default="deploy">
  <!-- 项目的配置信息 -->
  <property name="src.dir" value="${basedir}/src" />
  <property name="test.dir" value="${basedir}/test" />
  <property name="tools.dir" value="${basedir}/externs/sdcfe/tools" />
  <property name="build.dir" value="${basedir}/../../../target/output" />
  <property name="externs.js" value="${src.dir}/tangram.externs.js" />
  <property name="pdc.js" value="${src.dir}/pdc.externs.js" />
  <property name="hm.js" value="${src.dir}/hm.externs.js" />
  <property name="ant.lib.js" value="${src.dir}/ant.lib.js" />
  <property name="less_include_path" value="${basedir}/src/css/less" />

  <!-- 以下参数是给google-closure-compiler.jar使用的 -->
  <property name="compilation_level" value="BAIDU_OPTIMIZATIONS" />
  <property name="flagfile" value="${src.dir}/jn/build.cfg" />

  <!-- 这些属性的定义会自动识别出来的 -->
  <property name="jn.entry.DAILY_REPORT_URL" value="/daily_report/index.html" />
  <property name="jn.entry.DASHBOARD_URL" value="/dashboard/index.html" />
  <property name="jn.entry.TIEBA_URL" value="/tieba/index.html" />
  <property name="jn.entry.GOLD_URL" value="/gold/index.html" />
  <property name="jn.entry.LANDMARK_URL" value="/landmark/index.html" />
  <property name="jn.entry.SYS_DASHBOARD_URL" value="/sysdashboard/index.html" />
  <property name="jn.entry.SYS_LANDMARK_AD_REPORT_URL" value="/sys_landmark_173_report/index.html#/jn/sysdashboard/report/x173_report" />
  <property name="jn.entry.SYS_GOLD_AD_REPORT_URL" value="/gold/index.html#/account/agencyLayer/promotionList" />
  <property name="jn.entry.SYS_LANDMARK_KEYWORD_APPLY_URL" value="/sys_landmark_keyword_apply/index.html" />
  <property name="jn.entry.MESSAGE_VIEW_URL" value="/message_view/index.html" />
  <property name="jn.entry.CARD_URL" value="/card/index.html" />

  <!-- 以下参数是给Fer.py使用的 -->
  <property name="FLAGS_enable_javascript_rewriter" value="1" />
  <property name="FLAGS_enable_html_rewriter" value="1" />
  <property name="FLAGS_enable_auto_sprite" value="1" />
  <property name="FLAGS_enable_png8_convert" value="0" />
  <property name="FLAGS_noisy" value="0" />
  <property name="FLAGS_third_party" value="assets/js/tangram-base-1.3.7.1.js,assets/js/hm.js,assets/js/mustache.js,assets/js/ueditor.js" />

  <!-- 以下参数是用来获取环境变量的，例如：echo(_("env.USER")); -->
  <property environment="env" />

  <target name="clean" description="delete generated files">
    <delete dir="${build.dir}" />
  </target>

  <target name="gen_build_cfg" description="重新生成build.cfg文件">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var flags = getPath(_("src.dir") + "/jn/flags.js");
      var content = readFile(flags).split("\n");
      // All of the FLAGS_xxx are boolean type.
      var cfg = [];
      for(var i = 0; i < content.length; i ++) {
        var line = content[i];
        if(line.indexOf("var FLAGS_") == 0) {
          echo(line);
          var chunks = line.split(/[\s+;]/);
          cfg[cfg.length] = ('--define="' + chunks[1] + '=' + chunks[3] + '"');
        }
      }
      writeFile(getPath(_("src.dir") + "/jn/build.cfg"), cfg.join('\n'));
    ]]>
    </script>
  </target>

  <target name="gen_map" description="更新er_ad_list和er_action_list">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      exec('node', ['src/app/gen_map.js']);
    ]]>
    </script>
  </target>

  <target name="less" description="更新所有的*.compiled.css">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var basedir = _("basedir"),
          lessc = getPath("tools/node_modules/less/bin/lessc"),
          include_path = getPath("src/css/less");

      // ant less -Ddir=src/ad/widget
      var dir = _("dir") || _('src.dir');
      fileset(dir).forEach(function(file){
        if (/\.less$/.test(file)) {
          file = file.replace(getPath(basedir + '/'), '');
          exec('node', [lessc, '--include-path=' + include_path,
            file, file.replace(".less", ".compiled.css")]);
        }
      });
    ]]>
    </script>
  </target>

  <target name="app.sequence" description="串行build所有的entry_point">
      <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        build_app_entry('main.html', '__main__');
        build_app_entry('src/entry/gold.html', 'gold');
        build_app_entry('src/entry/dashboard.html', 'dashboard');
        build_app_entry('src/entry/landmark.html', 'landmark');
        build_app_entry('src/entry/sysdashboard.html', 'sysdashboard');
        build_app_entry('src/entry/daily_report.html', 'daily_report');
        build_app_entry('src/entry/sys_landmark_173_report.html', 'sys_landmark_173_report');
        build_app_entry('src/entry/sys_landmark_keyword_apply.html', 'sys_landmark_keyword_apply');
        build_app_entry('src/entry/message_view.html', 'message_view');
        build_app_entry('src/entry/card.html', 'card');
      ]]>
      </script>
  </target>

  <target name="app.all" description="并行build所有的entry_point">
    <parallel threadCount="8" threadsPerProcessor="2" failonany="true">
      <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        // 路由页面
        build_app_entry('main.html', '__main__');
        // 掘金产品
        build_app_entry('src/entry/gold.html', 'gold');
        // 查看消息页面
        build_app_entry('src/entry/message_view.html', 'message_view');
      ]]>
      </script>

      <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        // 产品平台页
        build_app_entry('src/entry/dashboard.html', 'dashboard');
        // 地标产品
        build_app_entry('src/entry/landmark.html', 'landmark');
      ]]>
      </script>

      <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        // 客户管理平台页
        build_app_entry('src/entry/sysdashboard.html', 'sysdashboard');
        build_app_entry('src/entry/daily_report.html', 'daily_report');
        // 地标计划报告页
        build_app_entry('src/entry/sys_landmark_173_report.html', 'sys_landmark_173_report');
      ]]>
      </script>

      <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        // 客户管理 中心 - 定向管理 - 查看新词申请记录页
        build_app_entry('src/entry/sys_landmark_keyword_apply.html', 'sys_landmark_keyword_apply');
        // 贴吧
        build_app_entry('src/entry/tieba.html', 'tieba');
      ]]>
      </script>

      <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        // 企业名片
        build_app_entry('src/entry/card.html', 'card');
      ]]>
      </script>

    </parallel>
  </target>

  <target name="app.deploy" description="调试entry_point">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _("name");
      if (!!name) {
        _('entry_point', 'src/entry/' + name + '.html');
        _('output_dir_name', name);
      }
      build_app_entry(_("entry_point"), _("output_dir_name"));
    ]]>
    </script>
  </target>

  <target name="ad.test" description="回归AD所有的测试用例">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      fileset("src/ad").forEach(function(file){
        if (file.match(/\.test\.html$/)) {
          exec('phantomjs', [
            'tools/run-qunit.js',
            'http://jntest.baidu.com:8080/' + file.replace(/\\/g, '/')
          ]);
        }
      });
    ]]>
    </script>
  </target>

  <target name="ad.gen_preview" description="为src/ad/impl/*.app.html生成预览图片">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      // bin/phantomjs examples/render_ad.js http://jntest.baidu.com:8080/src/ad/impl/style4.online.app.html style4.preview.png
      fileset("src/ad/impl").forEach(function(file){
        if (file.match(/\.app\.html$/)) {
          var name = file.split('/').pop().replace('.app.html', '');
          exec('phantomjs', [
            'src/ad/render_ad.js',
            'http://jntest.baidu.com:8080/' + file.replace(/\\/g, '/') + '?cc=1&amp;ct=1',
            'src/ad/preview/' + name + '.png'
          ]);
        }
      });
      fileset("src/ad/widget").forEach(function(file){
        if (file.match(/\.app\.html$/)) {
          var name = file.split('/').pop().replace('.app.html', '');
          exec('phantomjs', [
            'src/ad/render_ad.js',
            'http://jntest.baidu.com:8080/' + file.replace(/\\/g, '/') + '?cc=1&amp;ct=1',
            'src/ad/preview/widget/' + name + '.png'
          ]);
        }
      });
    ]]>
    </script>
  </target>

  <target name="ad.all" description="build all of the materials in ad/impl directory">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      fileset("src/ad/impl").forEach(function(file){
        if (file.match(/\.app\.html$/) && !file.match(/\.online\.app\.html$/)) {
          var name = basename(file).replace('.app.html', '');
          var dir = dirname(file);
          var output_dir = dir.replace('src/', '') + '/' + name;
          // echo('[' + name + '][' + dir + '][' + output_dir + ']');
          build_ad_entry(name, dir, output_dir);
        }
      });
    ]]>
    </script>
  </target>

  <target name="ad.rewrite" description="ad.deploy之后，对生成的代码再次重写，保证符合检索端的约定来生成RCV地址">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _("name");
      if (!name) {
        fail("Please set -Dname");
      }

      var dir = getPath(_("build.dir") + '/' + name);
      if (!fileExists(dir)) {
        fail("No such directory, please first run `ant ad.deploy -Dname=" + name + "`");
      }

      var only_dump_links = 1;
      if ('0' == _('only_dump_links')) {
          only_dump_links = 0;
      }

      var link_id = parseInt(_("link_id"), 10) || '0';
      fileset(dir).forEach(function(file){
        var fn = basename(file);
        if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
          var args = [
            getPath(_('tools.dir') + '/bin/Fer.py'),
            '--rewrite_deploy_code',
            '--link_id ' + link_id,
            (only_dump_links ? '--only_dump_links' : ''),
            '--name ' + file
          ];
          exec(PYTHON(), args);
        }
      });
    ]]>
    </script>
  </target>

  <target name="ad.deploy" description="build一个广告物料的entry_point">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _("name");
      if (!name) {
        fail("please set -Dname");
      }

      var dir = _("dir") || 'src/ad/impl';
      var output_dir = _("output_dir") || name;
      build_ad_entry(name, dir, output_dir);

      var stage = _("stage");
      if (stage == '2' || stage == '3') {
        var dir = getPath(_("build.dir") + '/' + name);
        if (!fileExists(dir)) {
          fail("No such directory, please first run `ant ad.deploy -Dname=" + name + "`");
        }

        var only_dump_links = ('2' == stage) ? 0 : 1;
        var async = ('1' == _('async')) ? 1 : 0;

        var link_id = parseInt(_("link_id"), 10) || '0';
        fileset(dir).forEach(function(file){
          var fn = basename(file);
          if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
            var args = [
              getPath(_('tools.dir') + '/bin/Fer.py'),
              '--rewrite_deploy_code',
              '--link_id ' + link_id,
              '--stage ' + stage,
              '--name ' + file,
              (async ? '--async ' : '')
            ];
            exec(PYTHON(), args);
          }
        });
      }
    ]]>
    </script>
  </target>

  <target name="main.pdc">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      exec(PYTHON(), [
        getPath(_('src.dir') + '/third_party/pdc/pms_build_v2.py'),
        '-o main.pdc.html',
        '--after_title_file src/third_party/pdc/after_title.js',
        '--after_head_file src/third_party/pdc/after_head.js',
        '--after_body_file src/third_party/pdc/after_body.js',
        '--after_html_file src/third_party/pdc/after_html.js',
        'main.html'
      ]);
    ]]>
    </script>
  </target>

  <target name="pdc">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var build_dir = _("build.dir");

      var file_list = [
        'src/third_party/pdc/after_title.js', 'src/third_party/pdc/after_head.js',
        'src/third_party/pdc/after_body.js', 'src/third_party/pdc/after_html.js',
      ];
      file_list.forEach(function(name){
        copy(name, build_dir + '/' + name);
        yui(name, build_dir + '/' + name);
      });

      exec(PYTHON(), [
        getPath(_('src.dir') + '/third_party/pdc/pms_build_v2.py'),
        '-o ' + (build_dir + '/main.html'),
        '--after_title_file ' + (build_dir + '/src/third_party/pdc/after_title.js'),
        '--after_head_file ' + (build_dir + '/src/third_party/pdc/after_head.js'),
        '--after_body_file ' + (build_dir + '/src/third_party/pdc/after_body.js'),
        '--after_html_file ' + (build_dir + '/src/third_party/pdc/after_html.js'),
        'main.html'
      ]);

      rmdir(build_dir + '/src');
    ]]>
    </script>
  </target>

  <target name="gcc-lint">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo_env();

      var ep = _("entry_point");
      if (!ep) {
        fail("please set -Dentry_point.");
      }

      var args = [
        getPath(_('tools.dir') + '/bin/Fer.py'),
        '--gcc_lint',
        '-p src',
        '--entry_point ' + ep,
        '-f "--warning_level=VERBOSE"',
        '-f "--externs=' + _("externs.js") + '"',
        '-f "--externs=' + _("pdc.js") + '"'
      ];
      exec(PYTHON(), args);
    ]]>
    </script>
  </target>

  <target name="echo_env" description="打印环境变量">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo_env();
    ]]>
    </script>
  </target>

  <target name="deploy"
          depends="clean,echo_env,check_permission,gen_build_cfg,app.all"
          description="部署项目">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo_env();

      var build_dir = _("build.dir");
      /**
       * @param {string} file 要拷贝的文件名称.
       */
      function copy_to_build_dir(file, opt_overwrite) {
        var overwrite = true;
        if (opt_overwrite === false) {
          overwrite = false;
        }

        copy(file, build_dir + '/' + file, opt_overwrite);
      }

      var file_list = [
        'index.html', 'login.html', 'monitor.jsp',
        'forgetPassword.html','forgetPasswordSuccess.html',
        'resetPassword.html','resetPasswordFail.html','resetPasswordSuccess.html',
        'accessdenied.html',
        'favicon.ico', 'robots.txt',
        'assets/text/material_iframe.html', 
        'assets/text/history.html', 
        'assets/img', 'assets/flash', 'assets/third_party',
        'product.dtd',
        'group_product.dtd',
        'bin'
      ];
      file_list.forEach(function(name){
        copy_to_build_dir(name);
      });

      // 拷贝额外的资源过去
      // FIXME 如果资源探测的方式足够准确的话，就不需要了...
      (['assets/js', 'assets/css']).forEach(function(dir){
        file_list = fileset(dir, /\.svn/);
        file_list.forEach(function(name){
          var dest_path = getPath(build_dir + '/' + name),
              dest = new java.io.File(dest_path);
          if (!dest.exists()) {
            copy(name, dest_path);
          }
        });
      });

      // 将__main__中的内容拷贝到根目录下面去
      fileset(build_dir + '/__main__').forEach(function(path){
        if (/index\.html$/.test(path)) {
          copy(path, build_dir + path.replace(/^.*__main__/g, '').replace('index.html', 'main.html'));
        } else {
          copy(path, build_dir + path.replace(/^.*__main__/g, ''));
        }
      });
      rmdir(build_dir + '/__main__');
    ]]>
    </script>
  </target>

  <target name="test" description="测试">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo(self.getOwningTarget());
      _("X_NAME", "leeight");
      echo(_("X_NAME"));
      var a = echoproperties();
      for(var i = 0; i < a.length; i ++) {
        if (a[i].match(/^([a-zA-Z_\.]+)_URL=/)) {
          var name = a[i].split('=')[0];
          echo(name);
        } else if (a[i].match(/^FLAGS_enable/)) {
          var name = a[i].split('=')[0];
          echo(name);
        }
      }
      echo(_("HELLO"));
      var list = [1,2,3];
      list.forEach(function(){
        logger.debug(arguments[0]);
      });
    ]]>
    </script>
  </target>

  <target name="deps" description="generated deps.js">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      exec('Fer', [
        '--gen_deps',
        '-p src',
        '--output_file ' + getPath('src/deps.js')
      ]);
    ]]>
    </script>
  </target>

  <target name="lint">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo(_("compilation_level"));
      var build_dir = _("build.dir");
      fileset(build_dir + '/__main__').forEach(function(path){
        echo(path.replace(/^.*__main__/g, ''));
      })
    ]]>
    </script>
  </target>

  <target name="patch" description="给tangram打patch">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var output = tempfile();
      
      // tangram.patch
      yui("src/tangram.patch.js", output);
      var patch = readFile(output);
      
      // stacktrace
      yui("src/third_party/stacktrace/stacktrace.js", output);
      var stacktrace = readFile(output);

      // html5shiv
      var html5shiv = readFile("src/third_party/html5shiv/html5.js");

      // src/third_party/tieba/post_video_url.js
      yui("src/third_party/tieba/post_video_url.js", output);
      var post_video_url = readFile(output);

      // tangram
      var tangram = readFile("assets/js/tangram-base-1.3.7.1.ori.js");

      writeFile("assets/js/tangram-base-1.3.7.1.js",
        tangram + ";\n" +
        patch + ";\n" +
        stacktrace + ";\n" +
        html5shiv + ";\n" +
        post_video_url);

      // ueditor
      yui("src/third_party/ueditor/editor_config.js", output);
      var ueditor = readFile(output);
      yui("src/third_party/ueditor/editor_all_min.js", output);
      ueditor += readFile(output);
      writeFile("assets/js/ueditor.js", ueditor);
      copy("src/third_party/ueditor/themes", "assets/third_party/ueditor/themes");
      copy("src/third_party/ueditor/dialogs", "assets/third_party/ueditor/dialogs");
    ]]>
    </script>
  </target>

  <target name="check_permission" description="检测是否给所有的接口URL都配置的权限">
    <script language="javascript" src="${ant.lib.js}">
      <![CDATA[
        var permission_file = getPath(_('basedir') + '/../scripts/user/script/permission.txt');
        if (!new java.io.File(permission_file).exists()) {
          echo("Can't find permission_file = " + permission_file);
        } else {
          var content = readFile(permission_file).split("\n");
          var map = {};
          for(var i = 0, j = content.length; i < j; i ++) {
            if (content[i].indexOf("/data/") == 0) {
              var tokens = content[i].split(/\s+/gi);
              // echo(tokens[0] + " -> " + tokens[1]);
              if (map[tokens[0]] === true) {
                fail("Duplicate url permission definition: " + tokens[0]);
              } else {
                map[tokens[0]] = true;
              }
            }
          }

          // 读取所有的js文件，查找所有的接口，检测url是否存在于map中，如果不存在，fail报错即可
          var pattern = /(['"])(\/data\/[^'"]+)\1/gi;
          fileset(_('src.dir')).forEach(function(file){
            if (/\.js$/.test(file)) {
              var js_content = readFile(file);
              var match = js_content.match(pattern);
              if (match) {
                for(var i = 0, j = match.length; i < j; i ++) {
                  var api = match[i].replace(/['"\?]/gi, '');
                  echo("CHKING URL PERMISSION: " + api);
                  if (!map[api]) {
                    fail("API_URL = [" + api + "] not found in the permission.txt");
                  }
                }
              }
            }
          });
        }
      ]]>
    </script>
  </target>
</project>
